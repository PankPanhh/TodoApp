import React, { useState, useMemo, useRef, useEffect } from "react";
import TodoForm from "./components/TodoForm";
import TodoList from "./components/TodoList";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const Todo = () => {
  // N√¢ng c·∫•p state: M·ªói todo l√† 1 object c√≥ id, text, done
  const [todos, setTodos] = useState([
    { id: 1, text: "H·ªçc React", done: true },
    { id: 2, text: "H·ªçc Tailwind CSS", done: false },
  ]);
  const [newTodo, setNewTodo] = useState("");
  const [editTodoId, setEditTodoId] = useState(null); // üëà L∆∞u ID ƒëang s·ª≠a, kh√¥ng l∆∞u index
  const [editText, setEditText] = useState("");
  const [filter, setFilter] = useState("all");
  const inputRef = useRef(null);

  // Shortcut: press '/' to focus the add input (like many apps)
  useEffect(() => {
    const onKey = (e) => {
      // ignore when user types into inputs or uses modifier keys
      const tag = (e.target && e.target.tagName) || '';
      if (tag === 'INPUT' || tag === 'TEXTAREA' || e.metaKey || e.ctrlKey || e.altKey) return;
      if (e.key === '/') {
        e.preventDefault();
        inputRef.current?.focus();
      }
    };
    window.addEventListener('keydown', onKey);
    return () => window.removeEventListener('keydown', onKey);
  }, []);

  // === C√ÅC H√ÄM CRUD (ƒê√É T·ªêI ∆ØU V·ªöI ID) ===

  // CREATE: Th√™m ID duy nh·∫•t khi t·∫°o
  const AddTodo = () => {
    // Validate input r·ªóng (ƒê√£ c√≥)
    if (newTodo.trim() === "") {
      toast.warn("B·∫°n ch∆∞a nh·∫≠p c√¥ng vi·ªác!");
      return;
    }
    const newTodoItem = {
      id: Date.now(), // üëà D√πng timestamp l√†m ID
      text: newTodo,
      done: false,
    };
    setTodos([newTodoItem, ...todos]); // Th√™m v√†o ƒë·∫ßu danh s√°ch
    setNewTodo(""); // Clear input sau khi th√™m (ƒê√£ c√≥)
    toast.success("ƒê√£ th√™m c√¥ng vi·ªác!");
  };

  // UPDATE (Step 1): K√≠ch ho·∫°t ch·∫ø ƒë·ªô s·ª≠a b·∫±ng ID
  const EditTodo = (id) => {
    setEditTodoId(id); // üëà L∆∞u ID
    const todoToEdit = todos.find((t) => t.id === id); // T√¨m todo b·∫±ng ID
    setEditText(todoToEdit.text);
  };

  // UPDATE (Step 2): L∆∞u l·∫°i n·ªôi dung ƒë√£ s·ª≠a b·∫±ng ID
  const UpdateTodo = (id) => {
    // Validate input r·ªóng (ƒê√£ c√≥)
    if (editText.trim() === "") {
      toast.warn("N·ªôi dung kh√¥ng ƒë∆∞·ª£c r·ªóng!");
      return;
    }
    setTodos(
      todos.map((todo) =>
        todo.id === id ? { ...todo, text: editText } : todo
      )
    );
    setEditTodoId(null);
    setEditText("");
    toast.info("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
  };

  // DELETE: Xo√° b·∫±ng ID
  const DeleteTodo = (id) => {
    // X√°c nh·∫≠n xo√° (ƒê√£ c√≥)
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° c√¥ng vi·ªác n√†y kh√¥ng?")) {
      setTodos(todos.filter((todo) => todo.id !== id)); // üëà L·ªçc ra b·∫±ng ID
      toast.error("ƒê√£ xo√° c√¥ng vi·ªác!");
    }
  };

  // TOGGLE: Tick ho√†n th√†nh b·∫±ng ID
  const ToggleDone = (id) => {
    setTodos(
      todos.map((todo) =>
        todo.id === id ? { ...todo, done: !todo.done } : todo
      )
    );
  };

  // L·ªçc (Filtering): Logic n√†y v·∫´n ƒë√∫ng
  const filteredTodos = useMemo(() => {
    return todos.filter((todo) => {
      if (filter === "active") return !todo.done;
      if (filter === "completed") return todo.done;
      return true; // filter === 'all'
    });
  }, [todos, filter]);

  return (
    <div className="flex flex-col items-center">
      <div className="w-full max-w-xl bg-white dark:bg-gray-800 shadow-2xl rounded-2xl p-6 transition-colors">
        <h1 className="text-3xl font-bold text-gray-800 dark:text-gray-100 text-center mb-6">
          Qu·∫£n l√Ω c√¥ng vi·ªác
        </h1>

        {/* Form nh·∫≠p c√¥ng vi·ªác (Kh√¥ng ƒë·ªïi) */}
  <TodoForm newTodo={newTodo} setNewTodo={setNewTodo} onAdd={AddTodo} inputRef={inputRef} />

        {/* B·ªô l·ªçc c√¥ng vi·ªác (Kh√¥ng ƒë·ªïi) */}
        <div className="flex justify-center gap-2 sm:gap-3 mt-4 mb-4">
          {[ "all", "active", "completed" ].map((f) => (
            <button
              key={f}
              onClick={() => setFilter(f)}
              className={`px-4 py-2 rounded-lg border text-sm font-medium transition-all duration-200 ${
                filter === f
                  ? "bg-blue-600 text-white border-blue-600 shadow-md"
                  : "bg-white dark:bg-gray-700 text-gray-600 dark:text-gray-300 border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-600"
              }`}
            >
              {f === "all"
                ? "T·∫•t c·∫£"
                : f === "active"
                ? "ƒêang l√†m"
                : "ƒê√£ xong"}
            </button>
          ))}
        </div>

        {/* Danh s√°ch c√¥ng vi·ªác */}
        <TodoList
          todos={filteredTodos} // üëà Truy·ªÅn danh s√°ch ƒë√£ l·ªçc
          editTodoId={editTodoId} // üëà ƒê·ªïi t√™n prop cho r√µ nghƒ©a
          editText={editText}
          setEditText={setEditText}
          onEdit={EditTodo}
          onUpdate={UpdateTodo}
          onDelete={DeleteTodo}
          onToggle={ToggleDone}
        />
      </div>

      {/* Th√¥ng b√°o Toast (ƒê√£ c√≥) */}
      <ToastContainer
        position="bottom-right"
        autoClose={2000}
        theme="light"
        newestOnTop
      />
    </div>
  );
};

export default Todo;
